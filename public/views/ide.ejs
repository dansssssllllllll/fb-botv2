<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Advanced Code Editor</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/mode-javascript.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/theme-monokai.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prettier/2.8.4/standalone.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prettier/2.8.4/parser-babel.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
  <style>
    :root {
      --bg-color: #272822;
      --text-color: #f8f8f2;
      --editor-bg: #1e1e1e;
      --button-bg: rgba(255, 255, 255, 0.1);
      --button-hover-bg: rgba(255, 115, 0, 0.5);
      --border-color: rgba(255, 255, 255, 0.2);
      --error-color: #f92672;
    }

    body {
      background-color: var(--bg-color);
      color: var(--text-color);
      font-family: 'Courier New', Courier, monospace;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }

    header {
      background-color: var(--editor-bg);
      padding: 1rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
    }

    h1 {
      font-size: 1.5rem;
      margin: 0;
      animation: glow 1.5s ease-in-out infinite alternate;
    }

    @keyframes glow {
      0% { text-shadow: 0 0 5px #ff0000, 0 0 10px #ff0000; }
      50% { text-shadow: 0 0 5px #ff7300, 0 0 10px #ff7300; }
      100% { text-shadow: 0 0 5px #f8f8f2, 0 0 10px #f8f8f2; }
    }

    #theme-toggle {
      background-color: var(--button-bg);
      border: 1px solid var(--border-color);
      color: var(--text-color);
      padding: 0.5rem 1rem;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    #theme-toggle:hover {
      background-color: var(--button-hover-bg);
    }

    #editor-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      padding: 1rem;
      gap: 1rem;
    }

    #editor {
      flex: 1;
      border-radius: 5px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
    }

    #console {
      background-color: var(--editor-bg);
      padding: 1rem;
      border-radius: 5px;
      height: 150px;
      overflow-y: auto;
      font-family: monospace;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
    }

    #error-message {
      color: var(--text-color);
      background-color: var(--error-color);
      padding: 1rem;
      border-radius: 5px;
      display: none;
    }

    #action-btn {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: var(--button-bg);
      border: 1px solid var(--border-color);
      color: var(--text-color);
      padding: 0.75rem;
      border-radius: 50%;
      cursor: pointer;
      font-size: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.3s, transform 0.2s;
      z-index: 10;
    }

    #action-btn:hover {
      background-color: var(--button-hover-bg);
      transform: scale(1.1);
    }

    #menu {
      display: none;
      position: fixed;
      bottom: 80px;
      right: 20px;
      background-color: var(--editor-bg);
      border-radius: 5px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.5);
      width: 150px;
      z-index: 100;
    }

    #menu a {
      display: block;
      padding: 10px;
      color: var(--text-color);
      text-decoration: none;
      font-size: 1rem;
    }

    #menu a:hover {
      background-color: var(--button-hover-bg);
    }

    @media (max-width: 768px) {
      h1 {
        font-size: 1.2rem;
      }

      #editor-container {
        padding: 0.5rem;
      }

      #action-btn {
        bottom: 10px;
        right: 10px;
      }

      #menu {
        bottom: 60px;
        right: 10px;
      }
    }
  </style>
</head>
<body>
  <header>
    <h1><i class="fa-solid fa-code"></i> Advanced JS IDE</h1>
    <button id="theme-toggle"><i class="fas fa-moon"></i> Toggle Theme</button>
  </header>

  <div id="editor-container">
    <div id="editor"></div>
    <div id="console">Console Output:</div>
    <div id="error-message"></div>
  </div>

  <button id="action-btn"><i class="fas fa-cogs"></i></button>
  <div id="menu">
    <a href="#" id="format-code">Format Code</a>
    <a href="#" id="save-file">Save File</a>
    <a href="#" id="load-file">Load File</a>
    <a href="#" id="run-code">Run Code</a>
  </div>

  <script>
    const editor = ace.edit("editor");
    editor.setTheme("ace/theme/monokai");
    editor.session.setMode("ace/mode/javascript");
    editor.setOptions({ fontSize: "14px" });

    const consoleOutput = document.getElementById("console");
    const errorMessage = document.getElementById("error-message");
    const themeToggle = document.getElementById("theme-toggle");

    // Function to clear error markers
    function clearErrorMarkers() {
      const markers = editor.session.getMarkers(true);
      for (const key in markers) {
        editor.session.removeMarker(markers[key].id);
      }
    }

    // Function to check syntax errors
    function checkSyntax() {
      const code = editor.getValue();
      clearErrorMarkers();

      try {
        new Function(code); // Try to run the code
        errorMessage.style.display = "none"; // Hide error message if no errors
      } catch (e) {
        const lineNumber = e.lineNumber - 1; // Adjust for 0-based index
        const errorText = e.message;

        // Highlight the line with the error
        editor.session.addMarker(new ace.Range(lineNumber, 0, lineNumber, 1), "error-line", "background", true);

        // Display the error message
        errorMessage.style.display = "block";
        errorMessage.innerText = `Syntax Error on line ${e.lineNumber}: ${errorText}`;
      }
    }

    // Format Code function using Prettier
    function formatCode() {
      const code = editor.getValue();
      const formattedCode = prettier.format(code, {
        parser: "babel",
        plugins: prettierPlugins
      });
      editor.setValue(formattedCode);
    }

    // Save the current code as a .js file using FileSaver.js
    function saveFile() {
      const code = editor.getValue();
      const blob = new Blob([code], { type: 'application/javascript' });
      const filename = prompt("Enter a filename", "code.js") || "code.js";
      saveAs(blob, filename);
    }

    // Load the code from a file
    function loadFile(event) {
      const file = event.target.files[0];
      const reader = new FileReader();

      reader.onload = function(e) {
        const content = e.target.result;
        editor.setValue(content);
      };

      if (file) {
        reader.readAsText(file);
      }
    }

    // Run the code and display output in the console
    function runCode() {
      const code = editor.getValue();
      consoleOutput.innerText = "Console Output:\n";
      try {
        const originalConsoleLog = console.log;
        console.log = function(...args) {
          consoleOutput.innerText += args.join(" ") + "\n";
          originalConsoleLog(...args);
        };
        new Function(code)(); // Execute the code
      } catch (e) {
        consoleOutput.innerText += `Error: ${e.message}\n`;
      } finally {
        console.log = originalConsoleLog;
      }
    }

    // Toggle menu visibility
    document.getElementById('action-btn').addEventListener('click', function() {
      const menu = document.getElementById('menu');
      menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
    });

    // Format Code when the option is clicked
    document.getElementById('format-code').addEventListener('click', function(e) {
      e.preventDefault();
      formatCode();
      document.getElementById('menu').style.display = 'none';
    });

    // Save file when the option is clicked
    document.getElementById('save-file').addEventListener('click', function(e) {
      e.preventDefault();
      saveFile();
      document.getElementById('menu').style.display = 'none';
    });

    // Load file when the option is clicked
    document.getElementById('load-file').addEventListener('click', function(e) {
      e.preventDefault();
      document.getElementById('menu').style.display = 'none';
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.js';
      input.addEventListener('change', loadFile);
      input.click();
    });

    // Run code when the option is clicked
    document.getElementById('run-code').addEventListener('click', function(e) {
      e.preventDefault();
      runCode();
      document.getElementById('menu').style.display = 'none';
    });

    // Automatically check syntax on editor content change
    editor.getSession().on('change', checkSyntax);

    // Toggle dark/light theme
    themeToggle.addEventListener('click', function() {
      const isDark = document.body.style.backgroundColor === "rgb(39, 40, 34)";
      document.body.style.backgroundColor = isDark ? "#f8f8f2" : "#272822";
      document.body.style.color = isDark ? "#272822" : "#f8f8f2";
      editor.setTheme(isDark ? "ace/theme/chrome" : "ace/theme/monokai");
      themeToggle.innerHTML = isDark ? '<i class="fas fa-sun"></i> Toggle Theme' : '<i class="fas fa-moon"></i> Toggle Theme';
    });
  </script>
</body>
</html>