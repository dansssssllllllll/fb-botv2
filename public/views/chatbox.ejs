<!DOCTYPE html>
<html lang="en" class="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Chatbox Horizon</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github-dark.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      height: 100vh;
      overflow: hidden;
    }

    /* Layout */
    .app-container {
      display: flex;
      height: 100vh;
      width: 100vw;
      overflow: hidden;
    }

    /* Sidebar */
    .sidebar {
      width: 280px;
      height: 100vh;
      background: white;
      border-right: 1px solid #e5e7eb;
      display: flex;
      flex-direction: column;
      transition: transform 0.3s ease;
      position: fixed;
      z-index: 40;
      left: 0;
      top: 0;
      transform: translateX(-100%);
    }

    .sidebar-open {
      transform: translateX(0);
    }

    .sidebar-header {
      padding: 1rem;
      border-bottom: 1px solid #e5e7eb;
    }

    .sidebar-footer {
      padding: 1rem;
      border-top: 1px solid #e5e7eb;
      position: sticky;
      bottom: 0;
      background: inherit;
      margin-top: auto;
    }

    .sidebar-content {
      flex: 1;
      overflow-y: auto;
      padding: 1rem;
      padding-bottom: 70px;
    }

    /* Chat area */
    .chat-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      height: 100vh;
      width: 100%;
      margin-left: 0;
    }

    .chat-header {
      padding: 1rem;
      border-bottom: 1px solid #e5e7eb;
      display: flex;
      align-items: center;
    }

    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 1rem;
    }

    .chat-input-container {
      padding: 1rem;
      border-top: 1px solid #e5e7eb;
      background: inherit;
      position: relative;
      width: 100%;
    }

    .chat-input-form {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      width: 100%;
    }

    .chat-input-form textarea {
      flex: 1;
      font-size: 16px;
      padding: 0.75rem;
      border: 1px solid #e5e7eb;
      border-radius: 0.5rem;
      resize: none;
      overflow-y: auto;
      max-height: 200px;
    }

    .chat-input-form button {
      padding: 0.75rem 1rem;
      font-size: 16px;
      border: none;
      border-radius: 0.5rem;
      background-color: #3b82f6;
      color: white;
      cursor: pointer;
    }

    .chat-input-form button:hover {
      background-color: #2563eb;
    }

    /* Messages */
    .message {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      max-width: 90%;
    }

    .message-user {
      justify-content: flex-end;
      margin-left: auto;
    }

    .message-avatar {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }

    .message-content {
      padding: 0.75rem 1rem;
      border-radius: 0.75rem;
      max-width: calc(100% - 50px);
      position: relative;
      word-wrap: break-word;
    }

    /* Code blocks */
    .code-container {
      position: relative;
      margin: 0.75rem 0;
      border-radius: 0.5rem;
      overflow: hidden;
      background: #1e1e1e;
    }

    .code-header {
      padding: 0.5rem 1rem;
      background: #252526;
      color: #9cdcfe;
      font-family: 'Fira Code', monospace;
      font-size: 0.8rem;
      display: flex;
      justify-content: space-between;
    }

    .code-content {
      padding: 0;
      margin: 0;
    }

    .code-copy-btn {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      background: rgba(30, 30, 30, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.1);
      color: #d4d4d4;
      cursor: pointer;
      padding: 0.25rem;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 0.25rem;
      z-index: 10;
      font-size: 12px;
    }

    /* HTML preview */
    .html-preview {
      border: 1px solid #e5e7eb;
      border-radius: 0.75rem;
      overflow: hidden;
      margin: 1rem 0;
      transition: all 0.3s ease;
    }

    .html-preview-header {
      padding: 0.5rem 1rem;
      background: #f3f4f6;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .html-preview-content {
      padding: 1rem;
    }

    /* Fullscreen styles */
    .html-preview.fullscreen {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      height: 100%;
      z-index: 1000;
      margin: 0;
      border-radius: 0;
      border: none;
    }

    .html-preview.fullscreen .html-preview-content {
      height: calc(100% - 40px);
      padding: 0;
    }

    .html-preview.fullscreen iframe {
      height: 100%;
      width: 100%;
      border: none;
    }

    /* Dark mode */
    .dark .sidebar {
      background: #1f2937;
      border-right-color: #374151;
    }

    .dark .sidebar-header,
    .dark .sidebar-footer {
      border-color: #374151;
    }

    .dark .message-content {
      background: #374151;
      color: white;
    }

    .dark .html-preview {
      border-color: #374151;
      background: #1f2937;
    }

    .dark .html-preview-header {
      background: #374151;
      color: white;
    }

    /* Message copy button */
    .message-copy-btn {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      opacity: 0;
      transition: opacity 0.2s;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.1);
      color: currentColor;
      cursor: pointer;
      padding: 0.25rem;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 0.25rem;
      z-index: 10;
      font-size: 12px;
    }

    .message:hover .message-copy-btn {
      opacity: 1;
    }

    .dark .message-copy-btn {
      background: rgba(0, 0, 0, 0.2);
      border-color: rgba(255, 255, 255, 0.1);
    }

    /* Mobile styles */
    @media (max-width: 768px) {
      .sidebar {
        width: 85vw;
        max-width: 300px;
      }

      .chat-container {
        padding-bottom: 80px;
      }

      .chat-input-container {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 12px;
        background: white;
        z-index: 20;
        border-top: 1px solid #e5e7eb;
      }

      .dark .chat-input-container {
        background: #1f2937;
        border-top-color: #374151;
      }

      .chat-input-form {
        display: flex;
        gap: 0.5rem;
      }

      .chat-input-form input {
        flex: 1;
        font-size: 16px !important;
      }

      .chat-input-form button {
        padding: 0.75rem 1rem;
        font-size: 16px;
      }

      .sidebar-footer {
        padding-bottom: calc(1rem + env(safe-area-inset-bottom));
      }

      .message-content {
        max-width: 85vw;
      }

      .chat-messages {
        padding-bottom: 80px;
      }
    }

    .personality-btn {
      transition: all 0.2s ease;
      border: 1px solid transparent;
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }

    .personality-btn:not(.active) {
      background-color: rgba(255, 255, 255, 0.1);
      border-color: currentColor;
      opacity: 0.7;
    }

    .personality-btn.active {
      background-color: var(--color);
      color: white;
      border-color: var(--color);
      transform: scale(1.05);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    .personality-btn:hover:not(.active) {
      opacity: 1;
      transform: translateY(-1px);
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
    }

    @keyframes pulse {
      0% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.05);
      }
      100% {
        transform: scale(1);
      }
    }

    .personality-btn.active {
      animation: pulse 2s infinite;
    }

    .personality-btn::after {
      content: attr(data-personality);
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      background: #333;
      color: white;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      white-space: nowrap;
      opacity: 0;
      transition: opacity 0.2s;
      pointer-events: none;
      z-index: 10;
    }

    .personality-btn:hover::after {
      opacity: 1;
    }

    .personality-btn.active::after {
      content: 'Current: 'attr(data-personality);
      background: var(--color);
    }

    /* Typing indicator */
    .typing-indicator {
      display: flex;
      padding: 10px 0;
    }

    .typing-dot {
      width: 8px;
      height: 8px;
      margin: 0 2px;
      background-color: #9CA3AF;
      border-radius: 50%;
      opacity: 0.4;
      animation: typingAnimation 1.4s infinite ease-in-out;
    }

    .typing-dot:nth-child(1) {
      animation-delay: 0s;
    }

    .typing-dot:nth-child(2) {
      animation-delay: 0.2s;
    }

    .typing-dot:nth-child(3) {
      animation-delay: 0.4s;
    }

    @keyframes typingAnimation {
      0%, 60%, 100% {
        opacity: 0.4;
        transform: translateY(0);
      }
      30% {
        opacity: 1;
        transform: translateY(-5px);
      }
    }

    /* Fade in animation */
    .fade-in {
      animation: fadeIn 0.3s ease-in-out;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  </style>
</head>

<body class="bg-gray-50 dark:bg-gray-900 text-gray-800 dark:text-gray-200">
  <div class="app-container">
    <!-- Sidebar overlay -->
    <div id="sidebarOverlay" class="fixed inset-0 bg-black/50 z-30 hidden" onclick="toggleSidebar()"></div>

    <!-- Sidebar -->
    <div id="sidebar" class="sidebar dark:bg-gray-800">
      <div class="sidebar-header dark:border-gray-700">
        <div class="flex items-center justify-between">
          <h2 class="text-xl font-bold">CHATBOX HORIZON</h2>
          <button id="closeSidebar" class="md:hidden" onclick="toggleSidebar()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">Powered by Haji Mix</p>
      </div>

      <div class="sidebar-content">
        <!-- Sessions -->
        <div class="mb-6">
          <div class="flex justify-between items-center mb-3">
            <h3 class="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase">Sessions</h3>
            <button id="newSessionBtn" class="text-xs text-gray-500 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400">
              <i class="fas fa-plus mr-1"></i> New
            </button>
          </div>
          <div id="sessionList" class="space-y-1 max-h-40 overflow-y-auto">
            <div class="text-center py-2 text-gray-500 dark:text-gray-400">
              <i class="fas fa-spinner fa-spin"></i> Loading...
            </div>
          </div>
        </div>

        <!-- Settings -->
        <div>
          <h3 class="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase mb-3">Settings</h3>

          <div class="mb-4">
            <label class="block text-sm font-medium mb-1">Provider</label>
            <select id="providerSelect" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600">
              <option value="workers">Workers (Default)</option>
              <option value="githubco">GitHubCo</option>
            </select>
          </div>

          <div class="mb-4">
            <label class="block text-sm font-medium mb-1">AI Model</label>
            <select id="modelSelect" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600">
              <option value="loading">Loading models...</option>
            </select>
          </div>

          <div class="mb-4">
            <label class="block text-sm font-medium mb-1">Personality</label>
            <div class="flex flex-wrap gap-2 mb-2">
              <button data-personality="default" class="personality-btn active px-3 py-1 rounded-full text-xs" style="--color: #7c3aed">Default</button>
              <button data-personality="friendly" class="personality-btn px-3 py-1 rounded-full text-xs" style="--color: #3b82f6">Friendly</button>
              <button data-personality="professional" class="personality-btn px-3 py-1 rounded-full text-xs" style="--color: #10b981">Professional</button>
              <button data-personality="humorous" class="personality-btn px-3 py-1 rounded-full text-xs" style="--color: #f59e0b">Humorous</button>
              <button data-personality="custom" class="personality-btn px-3 py-1 rounded-full text-xs" style="--color: #ec4899">Custom</button>
            </div>
            <div id="customPersonalityContainer" class="custom-personality-container hidden">
              <textarea id="customPersonality" placeholder="Enter custom instructions" class="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600"></textarea>
            </div>
          </div>

          <div class="mb-4" id="tokenSettings">
            <label class="block text-sm font-medium mb-1">Response Length</label>
            <div class="flex items-center gap-3">
              <input type="range" id="maxTokens" min="50" max="32000" class="w-full h-2 bg-gray-200 dark:bg-gray-600 rounded-lg">
              <span id="tokenValue" class="text-sm w-16">Auto</span>
            </div>
            <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1">
              <span>Short</span><span>Long</span>
            </div>
          </div>
        </div>
      </div>

      <div class="sidebar-footer dark:border-gray-700">
        <button id="saveSettings" class="w-full bg-primary-600 hover:bg-primary-700 text-white py-2 rounded-lg font-medium transition">
          <i class="fas fa-save mr-2"></i> Save Settings
        </button>
      </div>
    </div>

    <!-- Main chat area -->
    <div class="chat-container">
      <header class="chat-header bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
        <button id="toggleSidebar" class="mr-4 text-gray-500 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400" onclick="toggleSidebar()">
          <i class="fas fa-sliders-h"></i>
        </button>
        <h1 id="currentSessionName" class="text-lg font-semibold">New Session</h1>
        <div class="ml-auto flex items-center gap-2">
          <span id="currentProvider" class="text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-full">Haji Mix</span>
          <span id="currentModel" class="text-xs bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-full">
            <i class="fas fa-circle-notch fa-spin mr-1"></i> Loading...
          </span>
        </div>
      </header>

      <div id="chatMessages" class="chat-messages bg-white dark:bg-gray-900">
        <div class="message fade-in">
          <div class="message-avatar bg-indigo-100 dark:bg-indigo-900 text-indigo-600 dark:text-indigo-400">
            <i class="fas fa-robot"></i>
          </div>
          <div class="message-content bg-gray-100 dark:bg-gray-800">
            <p class="whitespace-pre-wrap">Hello! I'm your AI assistant. How can I help you today?</p>
            <button class="message-copy-btn" title="Copy message">
              <i class="far fa-copy"></i>
            </button>
          </div>
        </div>
      </div>

      <div class="chat-input-container bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
        <form id="chatForm" class="chat-input-form">
          <textarea id="userInput" placeholder="Type your message..." rows="1" class="flex-1 px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 resize-none overflow-y-auto"></textarea>
          <button type="submit" class="px-4 py-3 bg-primary-600 hover:bg-primary-700 text-white rounded-lg font-medium transition">
            <i class="fas fa-paper-plane"></i>
          </button>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Session name generator
    const sessionNameGenerator = {
      tech: ['Code Discussion', 'Tech Talk', 'Debugging Session', 'AI Exploration', 'Future Tech'],
      creative: ['Brainstorm', 'Creative Session', 'Story Crafting', 'Idea Exchange', 'Artistic Chat'],
      general: ['Conversation', 'Discussion', 'Chat Session', 'Q&A', 'Talk'],
      business: ['Strategy Talk', 'Business Chat', 'Professional Discussion', 'Meeting Notes', 'Plan Session'],
      random: ['Thought Exchange', 'Mind Meld', 'Digital Dialogue', 'Virtual Chat', 'AI Conversation'],

      generateName(message) {
        const lowerMsg = message.toLowerCase();
        let category = 'random';

        if (/(code|program|tech|computer|ai|algorithm)/i.test(lowerMsg)) category = 'tech';
        else if (/(art|creative|write|story|design|music)/i.test(lowerMsg)) category = 'creative';
        else if (/(business|work|professional|meeting|strategy)/i.test(lowerMsg)) category = 'business';
        else if (/(hello|hi|hey|greeting)/i.test(lowerMsg)) category = 'general';

        return this[category][Math.floor(Math.random() * this[category].length)];
      }
    };

    // App state
    const state = {
      models: [],
      sessions: [],
      currentSessionId: null,
      settings: {
        provider: 'workers',
        model: '@hf/thebloke/mistral-7b-instruct-v0.1-awq',
        personality: 'default',
        max_tokens: null,
        customInstructions: ''
      }
    };

    // DOM elements
    const elements = {
      sidebar: document.getElementById('sidebar'),
      sidebarOverlay: document.getElementById('sidebarOverlay'),
      toggleSidebar: document.getElementById('toggleSidebar'),
      closeSidebar: document.getElementById('closeSidebar'),
      newSessionBtn: document.getElementById('newSessionBtn'),
      sessionList: document.getElementById('sessionList'),
      currentSessionName: document.getElementById('currentSessionName'),
      currentProvider: document.getElementById('currentProvider'),
      providerSelect: document.getElementById('providerSelect'),
      modelSelect: document.getElementById('modelSelect'),
      personalityBtns: document.querySelectorAll('.personality-btn'),
      customPersonality: document.getElementById('customPersonality'),
      customPersonalityContainer: document.getElementById('customPersonalityContainer'),
      maxTokens: document.getElementById('maxTokens'),
      tokenValue: document.getElementById('tokenValue'),
      tokenSettings: document.getElementById('tokenSettings'),
      currentModel: document.getElementById('currentModel'),
      chatForm: document.getElementById('chatForm'),
      userInput: document.getElementById('userInput'),
      chatMessages: document.getElementById('chatMessages'),
      saveSettings: document.getElementById('saveSettings')
    };

    // Initialize the app
    document.addEventListener('DOMContentLoaded', function() {
      init();
    });

    async function init() {
      // Load theme preference first
      if (localStorage.getItem('darkMode') === 'true') {
        document.documentElement.classList.add('dark');
      }

      loadSettings();
      loadSessions();
      await fetchModels();
      setupEventListeners();

      if (state.sessions.length === 0) {
        createNewSession('General Chat');
      } else {
        loadSession(state.sessions[0].id);
      }

      updateUI();
      hljs.highlightAll();
      setupMobileViewport();
    }

    function loadSettings() {
      try {
        const savedSettings = localStorage.getItem('chatbox_settings');
        if (savedSettings) {
          const parsed = JSON.parse(savedSettings);
          Object.keys(state.settings).forEach(key => {
            if (parsed[key] !== undefined) {
              state.settings[key] = parsed[key];
            }
          });
        }
      } catch (e) {
        console.error("Error loading settings:", e);
      }
    }

    function loadSessions() {
      try {
        const sessions = localStorage.getItem('chatbox_sessions');
        if (sessions) {
          state.sessions = JSON.parse(sessions);
        } else {
          state.sessions = [];
          createNewSession('General Chat');
          return;
        }
      } catch (e) {
        console.error("Error loading sessions:", e);
        state.sessions = [];
        createNewSession('General Chat');
      }
      renderSessionList();
    }

    function saveSessions() {
      localStorage.setItem('chatbox_sessions', JSON.stringify(state.sessions));
    }

    function createNewSession(name = null) {
      const sessionId = 'session_' + Date.now();
      const sessionName = name || `Session ${state.sessions.length + 1}`;

      const newSession = {
        id: sessionId,
        name: sessionName,
        createdAt: new Date().toISOString(),
        messages: [{
          id: 'welcome_' + Date.now(),
          role: 'assistant',
          content: `Hello! I'm your AI assistant. How can I help you today?`,
          timestamp: new Date().toISOString()
        }],
        settings: {
          ...state.settings
        }
      };

      state.sessions.unshift(newSession);
      saveSessions();
      loadSession(sessionId);
      renderSessionList();
    }

    function loadSession(sessionId) {
      const session = state.sessions.find(s => s.id === sessionId);
      if (!session) return;

      state.currentSessionId = sessionId;
      elements.currentSessionName.textContent = session.name;
      state.settings = {
        ...session.settings
      };
      updateUI();

      elements.chatMessages.innerHTML = '';
      session.messages.forEach(msg => {
        if (msg.isHtmlPreview) {
          addHtmlPreviewMessage(msg.htmlContent, false);
        } else {
          addChatMessage(msg.role, msg.content, false);
        }
      });

      document.querySelectorAll('.session-item').forEach(item => {
        item.classList.toggle('active', item.dataset.sessionId === sessionId);
      });
    }

    function renderSessionList() {
      elements.sessionList.innerHTML = state.sessions.map(session => `
        <div class="session-item flex items-center justify-between px-3 py-2 rounded-lg cursor-pointer ${session.id === state.currentSessionId ? 'bg-indigo-100 dark:bg-gray-700' : 'hover:bg-gray-100 dark:hover:bg-gray-700'}" data-session-id="${session.id}">
          <div class="flex items-center truncate">
            <i class="fas fa-comment-alt mr-2 text-gray-500 dark:text-gray-400"></i>
            <span class="truncate">${session.name}</span>
          </div>
          <button class="delete-session text-gray-400 hover:text-red-500" data-session-id="${session.id}">
            <i class="fas fa-trash-alt text-xs"></i>
          </button>
        </div>
      `).join('');
    }

    async function fetchModels() {
      try {
        const apiUrl = state.settings.provider === 'githubco' ?
          'https://haji-mix.up.railway.app/api/githubco?check_models=true' :
          'https://haji-mix.up.railway.app/api/workers?check_models=true';

        const response = await fetch(apiUrl);
        if (!response.ok) throw new Error(`API request failed with status ${response.status}`);
        const data = await response.json();

        if (data.supported_models && Array.isArray(data.supported_models)) {
          state.models = data.supported_models;
          populateModelSelect();
          updateModelDisplay();

          if (state.models.length > 0 && !state.models.includes(state.settings.model)) {
            state.settings.model = state.models[0];
            updateModelDisplay();
          }
          return;
        }

        throw new Error(data.error || "No supported models found in response");

      } catch (error) {
        console.error("Failed to fetch models:", error);
        elements.modelSelect.innerHTML = '<option value="error">Failed to load models</option>';
        elements.currentModel.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Model Error';

        if (state.models.length > 0) {
          state.settings.model = state.models[0];
          updateModelDisplay();
        }
      }
    }

    function populateModelSelect() {
      elements.modelSelect.innerHTML = state.models.map(model =>
        `<option value="${model}" ${model === state.settings.model ? 'selected' : ''}>${model}</option>`
      ).join('');
    }

    function setupEventListeners() {
      // Personality buttons
      elements.personalityBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          elements.personalityBtns.forEach(b => b.classList.remove('active'));
          this.classList.add('active');
          state.settings.personality = this.getAttribute('data-personality') || 'default';

          if (this.getAttribute('data-personality') === 'custom') {
            elements.customPersonalityContainer.classList.remove('hidden');
            elements.customPersonality.focus();
          } else {
            elements.customPersonalityContainer.classList.add('hidden');
          }
        });
      });

      // Textarea input handling
      elements.userInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          elements.chatForm.dispatchEvent(new Event('submit'));
        }
      });

      // Auto-resize textarea
      elements.userInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = Math.min(this.scrollHeight, 200) + 'px';
      });

      // New session
      elements.newSessionBtn.addEventListener('click', () => createNewSession());

      // Session list interactions
      elements.sessionList.addEventListener('click', (e) => {
        if (e.target.closest('.delete-session')) {
          e.stopPropagation();
          const sessionId = e.target.closest('.delete-session').getAttribute('data-session-id');
          if (sessionId) deleteSession(sessionId);
        } else if (e.target.closest('.session-item')) {
          const sessionId = e.target.closest('.session-item').getAttribute('data-session-id');
          if (sessionId) loadSession(sessionId);
        }
      });

      // Token slider
      elements.maxTokens.addEventListener('input', function() {
        const value = parseInt(this.value) || 50;
        state.settings.max_tokens = value === 50 ? null : value;
        elements.tokenValue.textContent = value === 50 ? 'Auto' : `${value} tokens`;
      });

      // Provider change
      elements.providerSelect.addEventListener('change', async function() {
        state.settings.provider = this.value;
        state.models = [];
        elements.modelSelect.innerHTML = '<option value="loading">Loading models...</option>';
        updateModelDisplay();

        elements.tokenSettings.style.display = state.settings.provider === 'githubco' ? 'none' : 'block';
        await fetchModels();

        localStorage.setItem('chatbox_settings', JSON.stringify(state.settings));

        const session = state.sessions.find(s => s.id === state.currentSessionId);
        if (session) {
          session.settings = {
            ...state.settings
          };
          saveSessions();
        }

        showToast('Settings saved!');
        updateModelDisplay();
      });

      // Save settings
      elements.saveSettings.addEventListener('click', function() {
        state.settings.provider = elements.providerSelect.value;
        state.settings.model = elements.modelSelect.value;
        state.settings.personality = document.querySelector('.personality-btn.active').getAttribute('data-personality');
        state.settings.customInstructions = elements.customPersonality.value;

        localStorage.setItem('chatbox_settings', JSON.stringify(state.settings));

        const session = state.sessions.find(s => s.id === state.currentSessionId);
        if (session) {
          session.settings = {
            ...state.settings
          };
          saveSessions();
        }

        showToast('Settings saved!');
        updateModelDisplay();
      });

      // Chat form submission
      elements.chatForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const message = elements.userInput.value.trim();
        if (!message) return;

        const session = state.sessions.find(s => s.id === state.currentSessionId);
        if (session && session.messages.filter(m => m.role === 'user').length === 0) {
          session.name = sessionNameGenerator.generateName(message);
          elements.currentSessionName.textContent = session.name;
          elements.userInput.style.height = 'auto';
          renderSessionList();
        }

        addChatMessage('user', message);
        elements.userInput.value = '';
        showTypingIndicator();

        try {
          const response = await sendChatMessage(message);
          removeTypingIndicator();

          if (response.answer && /<[a-z][\s\S]*>/i.test(response.answer)) {
            addChatMessage('assistant', response.answer);
          } else {
            addChatMessage('assistant', response.answer || `Error: ${response.error || 'Unknown error'}`);
          }
        } catch (error) {
          removeTypingIndicator();
          addChatMessage('assistant', "Sorry, I couldn't process your request. Please try again.");
          console.error("API Error:", error);
        }
      });
    }

    function deleteSession(sessionId) {
      if (state.sessions.length <= 1) return showToast("You must have at least one session");

      state.sessions = state.sessions.filter(s => s.id !== sessionId);
      saveSessions();

      if (state.currentSessionId === sessionId) loadSession(state.sessions[0]?.id || '');
      renderSessionList();
      showToast("Session deleted");
    }

    function toggleSidebar() {
      elements.sidebar.classList.toggle('sidebar-open');
      elements.sidebarOverlay.classList.toggle('hidden');
    }

    function stringToCharcode(str) {
      return str.split('').map(char => char.charCodeAt(0)).join(',');
    }

    async function sendChatMessage(message) {
      const session = state.sessions.find(s => s.id === state.currentSessionId);
      if (!session) return { error: "No active session" };

      const params = new URLSearchParams();
      params.append('ask', encodeURIComponent(message));
      params.append('model', state.settings.model);

      let instructions = '';
      if (state.settings.personality === 'custom' && state.settings.customInstructions) {
        instructions = state.settings.customInstructions;
      } else if (state.settings.personality !== 'default') {
        instructions = getPersonalityInstructions(state.settings.personality);
      }

      if (instructions) params.append('roleplay', instructions);

      if (state.settings.provider === 'workers' && state.settings.max_tokens) {
        params.append('max_tokens', state.settings.max_tokens);
      }

      const apiUrl = `https://haji-mix.up.railway.app/api/${state.settings.provider}?${params.toString()}`;

      try {
        const response = await fetch(apiUrl);
        if (!response.ok) throw new Error(`API request failed with status ${response.status}`);
        return await response.json();
      } catch (error) {
        console.error("API Error:", error);
        return { error: error.message };
      }
    }

    function getPersonalityInstructions(type) {
      const personalities = {
        'default': 'Respond as a helpful AI assistant',
        'friendly': 'Respond in a warm, friendly tone. Use emojis occasionally. Be supportive and encouraging.',
        'professional': 'Respond in a formal, business-appropriate tone. Be concise and factual.',
        'humorous': 'Respond with humor and wit. Include jokes or funny references when appropriate.'
      };
      return personalities[type] || type;
    }

    function extractHtmlCodeBlocks(content) {
      const htmlBlockRegex = /```(?:html|htm)(?:\s+name=([^\n]+))?\n([\s\S]*?)```/g;
      const blocks = [];
      let match;

      while ((match = htmlBlockRegex.exec(content)) !== null) {
        blocks.push(match[2]);
      }

      return blocks;
    }

    function addHtmlPreviewMessage(htmlContent, saveToHistory = true) {
      const previewId = 'preview_' + Date.now();
      const iframeId = `html-preview-${previewId}`;

      const safeHtml = `
        <!DOCTYPE html>
        <html>
        <head>
            <base target="_blank">
            <style>
                body { margin: 0; padding: 0; font-family: sans-serif; }
                * { max-width: 100%; box-sizing: border-box; }
            </style>
        </head>
        <body>${htmlContent}</body>
        </html>
      `;

      const blob = new Blob([safeHtml], { type: 'text/html' });
      const url = URL.createObjectURL(blob);

      const previewDiv = document.createElement('div');
      previewDiv.className = 'message fade-in';
      previewDiv.dataset.messageId = previewId;
      previewDiv.innerHTML = `
        <div class="message-avatar bg-indigo-100 dark:bg-indigo-900 text-indigo-600 dark:text-indigo-400">
            <i class="fas fa-code"></i>
        </div>
        <div class="flex-1">
            <div class="html-preview">
                <div class="html-preview-header">
                    <span>HTML Preview</span>
                    <div class="flex gap-2">
                        <button class="fullscreen-btn text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                            <i class="fas fa-expand"></i>
                        </button>
                        <button class="close-btn text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                <div class="html-preview-content">
                    <iframe id="${iframeId}" class="w-full h-64 border-0"></iframe>
                </div>
            </div>
        </div>
      `;

      elements.chatMessages.appendChild(previewDiv);
      elements.chatMessages.scrollTop = elements.chatMessages.scrollHeight;

      setTimeout(() => {
        const iframe = document.getElementById(iframeId);
        if (iframe) {
          iframe.src = url;
        }
      }, 0);

      // Fullscreen toggle
      const fullscreenBtn = previewDiv.querySelector('.fullscreen-btn');
      fullscreenBtn.addEventListener('click', () => {
        const preview = previewDiv.querySelector('.html-preview');
        preview.classList.toggle('fullscreen');

        const iframe = preview.querySelector('iframe');
        if (preview.classList.contains('fullscreen')) {
          iframe.style.height = '100%';
          iframe.style.width = '100%';
        } else {
          iframe.style.height = '256px';
          iframe.style.width = '100%';
        }
      });

      // Close button
      const closeBtn = previewDiv.querySelector('.close-btn');
      closeBtn.addEventListener('click', () => {
        previewDiv.remove();
        if (saveToHistory) {
          const session = state.sessions.find(s => s.id === state.currentSessionId);
          if (session) {
            session.messages = session.messages.filter(m => m.id !== previewId);
            saveSessions();
          }
        }
      });

      if (saveToHistory) {
        const session = state.sessions.find(s => s.id === state.currentSessionId);
        if (session) {
          session.messages.push({
            id: previewId,
            role: 'assistant',
            content: '[HTML PREVIEW]',
            timestamp: new Date().toISOString(),
            isHtmlPreview: true,
            htmlContent: htmlContent
          });
          saveSessions();
        }
      }
    }

    function addChatMessage(role, content, saveToHistory = true) {
      const messageId = 'msg_' + Date.now();
      const isUser = role === 'user';

      const formattedContent = formatMessageContent(content);

      const messageDiv = document.createElement('div');
      messageDiv.className = `message fade-in ${isUser ? 'message-user' : ''}`;
      messageDiv.dataset.messageId = messageId;
      messageDiv.innerHTML = `
        <div class="message-avatar ${isUser ? 'bg-indigo-600 text-white' : 'bg-indigo-100 dark:bg-indigo-900 text-indigo-600 dark:text-indigo-400'}">
            <i class="fas ${isUser ? 'fa-user' : 'fa-robot'}"></i>
        </div>
        <div class="message-content ${isUser ? 'bg-indigo-600 text-white' : 'bg-gray-100 dark:bg-gray-800'}">
            ${formattedContent}
            <button class="message-copy-btn" title="Copy message">
                <i class="far fa-copy"></i>
            </button>
        </div>
      `;

      elements.chatMessages.appendChild(messageDiv);
      elements.chatMessages.scrollTop = elements.chatMessages.scrollHeight;

      // Copy button functionality
      const copyBtn = messageDiv.querySelector('.message-copy-btn');
      if (copyBtn) {
        copyBtn.addEventListener('click', () => {
          const messageContent = messageDiv.querySelector('.message-content').textContent || '';
          copyToClipboard(messageContent, copyBtn);
        });
      }

      // Highlight code blocks
      messageDiv.querySelectorAll('pre code').forEach(block => {
        hljs.highlightElement(block);
      });

      // Add copy buttons to code blocks
      messageDiv.querySelectorAll('.code-container').forEach(container => {
        const codeBlock = container.querySelector('code');
        const copyBtn = document.createElement('button');
        copyBtn.className = 'code-copy-btn';
        copyBtn.innerHTML = '<i class="far fa-copy"></i>';
        copyBtn.title = 'Copy code';
        copyBtn.addEventListener('click', () => {
          const code = codeBlock.textContent || '';
          copyToClipboard(code, copyBtn);
        });
        container.appendChild(copyBtn);
      });

      // Handle HTML previews
      const htmlBlocks = extractHtmlCodeBlocks(content);
      if (htmlBlocks.length > 0) {
        htmlBlocks.forEach(htmlContent => {
          addHtmlPreviewMessage(htmlContent, saveToHistory);
        });
      }

      if (saveToHistory) {
        const session = state.sessions.find(s => s.id === state.currentSessionId);
        if (session) {
          session.messages.push({
            id: messageId,
            role,
            content: content,
            timestamp: new Date().toISOString()
          });
          saveSessions();
        }
      }
    }

    function formatMessageContent(content) {
      // First escape HTML in non-code parts
      let formattedContent = escapeHtml(content);

      // Convert **text** to bold
      formattedContent = formattedContent.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

      // Process code blocks
      const codeBlockRegex = /```([\w-]*)(?:\s+name=([^\n]+))?\n([\s\S]*?)```/g;

      formattedContent = formattedContent.replace(codeBlockRegex, (match, language, filename, code) => {
        const lang = language || 'plaintext';
        const displayFilename = filename ? filename.trim() : '';

        // Preserve the original code (don't escape HTML here)
        const rawCode = code;

        return `
<div class="code-container">
    <div class="code-content">
        <pre><code class="language-${lang}">${rawCode.trim()}</code></pre>
    </div>
</div>`;
      });

      return `<div class="whitespace-pre-wrap">${formattedContent}</div>`;
    }

    function escapeHtml(unsafe) {
      return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }

    function copyToClipboard(text, button) {
      const originalText = button.innerHTML;

      // Try modern clipboard API first
      if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(text).then(() => {
          button.innerHTML = '<i class="fas fa-check"></i>';
          setTimeout(() => {
            button.innerHTML = originalText;
          }, 2000);
        }).catch(() => {
          fallbackCopy(text, button, originalText);
        });
      } else {
        // Fallback for browsers that don't support clipboard API
        fallbackCopy(text, button, originalText);
      }
    }

    function fallbackCopy(text, button, originalText) {
      const textarea = document.createElement('textarea');
      textarea.value = text;
      textarea.style.position = 'fixed';
      document.body.appendChild(textarea);
      textarea.select();

      try {
        const successful = document.execCommand('copy');
        button.innerHTML = successful ? '<i class="fas fa-check"></i>' : '<i class="fas fa-times"></i>';
      } catch (err) {
        button.innerHTML = '<i class="fas fa-times"></i>';
      }

      document.body.removeChild(textarea);
      setTimeout(() => {
        button.innerHTML = originalText;
      }, 2000);
    }

    function showTypingIndicator() {
      const typingDiv = document.createElement('div');
      typingDiv.className = 'message fade-in';
      typingDiv.id = 'typingIndicator';
      typingDiv.innerHTML = `
        <div class="message-avatar bg-indigo-100 dark:bg-indigo-900 text-indigo-600 dark:text-indigo-400">
            <i class="fas fa-robot"></i>
        </div>
        <div class="message-content bg-gray-100 dark:bg-gray-800">
            <div class="typing-indicator">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        </div>
      `;
      elements.chatMessages.appendChild(typingDiv);
      elements.chatMessages.scrollTop = elements.chatMessages.scrollHeight;
    }

    function removeTypingIndicator() {
      const indicator = document.getElementById('typingIndicator');
      if (indicator) indicator.remove();
    }

    function updateModelDisplay() {
      const modelName = state.settings.model.split('/').pop();
      elements.currentModel.innerHTML = `<i class="fas fa-microchip mr-1"></i> ${modelName}`;
      elements.currentProvider.textContent = state.settings.provider === 'githubco' ? 'GitHubCo' : 'Workers';
      elements.providerSelect.value = state.settings.provider;
      elements.tokenSettings.style.display = state.settings.provider === 'githubco' ? 'none' : 'block';

      if (state.models.includes(state.settings.model)) {
        elements.modelSelect.value = state.settings.model;
      }
    }

    function updateUI() {
      updateModelDisplay();

      // Set active personality button
      elements.personalityBtns.forEach(btn => {
        btn.classList.toggle('active', btn.getAttribute('data-personality') === state.settings.personality);
      });

      // Only show custom personality if it's actually selected
      elements.customPersonalityContainer.classList.toggle('hidden', state.settings.personality !== 'custom');
      if (state.settings.personality !== 'custom') {
        elements.customPersonality.value = '';
      } else {
        elements.customPersonality.value = state.settings.customInstructions || '';
      }

      // Set token slider value
      if (state.settings.max_tokens) {
        elements.maxTokens.value = state.settings.max_tokens;
        elements.tokenValue.textContent = `${state.settings.max_tokens} tokens`;
      } else {
        elements.maxTokens.value = 50;
        elements.tokenValue.textContent = 'Auto';
      }
    }

    function showToast(message) {
      const toast = document.createElement('div');
      toast.className = 'fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gray-800 dark:bg-gray-700 text-white px-4 py-2 rounded-lg shadow-lg flex items-center z-50';
      toast.innerHTML = `<i class="fas fa-check-circle mr-2"></i><span>${message}</span>`;
      document.body.appendChild(toast);

      setTimeout(() => {
        toast.classList.add('opacity-0', 'transition-opacity', 'duration-300');
        setTimeout(() => toast.remove(), 300);
      }, 2000);
    }

    function setupMobileViewport() {
      const vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', `${vh}px`);

      window.addEventListener('resize', () => {
        const vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
      });
    }
  </script>
</body>
</html>